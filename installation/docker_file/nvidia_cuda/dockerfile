# This is an auto generated Dockerfile for ros:desktop
# generated from docker_images_ros2/create_ros_image.Dockerfile.em
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive
# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics


RUN locale  

RUN apt update && apt install -y locales
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
RUN export LANG=en_US.UTF-8

RUN locale  
RUN apt install -y software-properties-common
RUN add-apt-repository universe

RUN apt update && apt install -y curl
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt update
RUN apt upgrade -y



# install ros2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-desktop \
    && rm -rf /var/lib/apt/lists/*
RUN apt update && apt-get install ros-dev-tools -y
RUN rosdep init && rosdep update


RUN apt-get update && apt-get install -y mesa-utils && apt-get install -y gedit

RUN apt-get update && apt-get install -y lsb-release wget gnupg
RUN apt-get install -y git
RUN apt-get install -y ros-humble-tf-transformations
RUN apt-get install -y python3-pip
RUN pip install numpy==1.24
RUN pip install transforms3d
RUN pip install pgm_reader
RUN pip install casadi
RUN pip install numba



#PIGPIO
RUN apt install -y python-setuptools python3-setuptools
RUN apt-get install -y python3-pip
RUN wget https://github.com/joan2937/pigpio/archive/master.zip
RUN apt-get install -y unzip
RUN unzip master.zip
RUN cd pigpio-master && make && make install
RUN apt install -y xsltproc



#FOR NAV2
RUN apt-get install -y libmagick++-dev
RUN apt install -y graphicsmagick-libmagick-dev-compat
RUN apt-get update
RUN apt install -y ros-humble-behaviortree-cpp-v3
RUN apt install -y ros-humble-navigation2 
RUN apt install -y ros-humble-nav2-bringup



# VISUALIZATION
RUN apt-get update
RUN apt install -y ros-humble-plotjuggler-ros



#PINOCCHIO
#RUN apt-get update
#RUN apt install -qqy lsb-release gnupg2 curl
#RUN echo "deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg" | tee /etc/apt/sources.list.d/robotpkg.list
#RUN curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | apt-key add -
#RUN apt-get update
#RUN apt install -qqy robotpkg-py310-pinocchio
#RUN echo 'export PATH=/opt/openrobots/bin:$PATH' >> /root/.bashrc
#RUN echo 'export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH' >> /root/.bashrc
#RUN echo 'export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH' >> /root/.bashrc
#RUN echo 'export PYTHONPATH=/opt/openrobots/lib/python3.10/site-packages:$PYTHONPATH' >> /root/.bashrc 
#RUN echo 'export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH' >> /root/.bashrc



#CROCODDYL
RUN echo "deb [arch=amd64] http://robotpkg.openrobots.org/wip/packages/debian/pub $(lsb_release -sc) robotpkg" |  tee /etc/apt/sources.list.d/robotpkg.list
RUN echo "deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -sc) robotpkg" |  tee /etc/apt/sources.list.d/robotpkg.list
RUN curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | apt-key add -
RUN apt-get update
RUN apt install robotpkg-py310-crocoddyl -y
RUN echo 'export PATH=/opt/openrobots/bin:$PATH' >> /root/.bashrc
RUN echo 'export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH' >> /root/.bashrc
RUN echo 'export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH' >> /root/.bashrc
RUN echo 'export PYTHONPATH=/opt/openrobots/lib/python3.10/site-packages:$PYTHONPATH' >> /root/.bashrc




#ACADOS
RUN git clone https://github.com/acados/acados.git
RUN cd acados && git submodule update --recursive --init
RUN cd acados && mkdir -p build
RUN cd acados/build && cmake -DACADOS_WITH_QPOASES=ON  -DACADOS_WITH_OSQP=ON ..
# add more optional arguments e.g. -DACADOS_WITH_OSQP=OFF/ON -DACADOS_INSTALL_DIR=<path_to_acados_installation_folder> above
RUN cd acados/build && make install -j4
#RUN cd acados/build && make shared_library
RUN pip install -e /acados/interfaces/acados_template
RUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"/acados/lib"' >> /root/.bashrc
RUN echo 'export ACADOS_SOURCE_DIR="/acados"' >> /root/.bashrc



RUN apt-get update 
RUN apt upgrade -y

#JAX
RUN apt-get update 
RUN pip install --upgrade "jax[cuda11_pip]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
RUN pip install jaxlib

#SHELL COLOR
SHELL ["/bin/bash", "-c"]
RUN echo 'export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;37m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] "'  >> /root/.bashrc
RUN echo 'export COPPELIASIM_ROOT_DIR=/home/coppeliasim_simulation/CoppeliaSim' >> /root/.bashrc
RUN echo '. /home/ros2_ws/install/setup.bash' >> /root/.bashrc
RUN echo '. /opt/ros/humble/setup.bash' >> /root/.bashrc

RUN echo 'alias launch_rviz="ros2 run rviz2 rviz2 -d /home/ros2_ws/src/utilities/rviz_config/common.rviz"' >> /root/.bashrc
RUN echo 'alias launch_slam="ros2 launch slam_toolbox online_async_launch.py"' >> /root/.bashrc
RUN echo 'alias launch_planners="ros2 run planners run_planners"' >> /root/.bashrc
RUN echo 'alias launch_joy="ros2 launch teleop_twist_joy teleop-launch.py joy_config:='xbox'"' >> /root/.bashrc
RUN echo 'alias launch_controllers="ros2 run controllers run_controllers"' >> /root/.bashrc

RUN echo 'alias launch_lidar_odometry="ros2 launch pointcloud_to_laserscan sample_laserscan_to_pointcloud_launch.py | ros2 launch kiss_icp odometry.launch.py topic:=/pointcloud visualize:=false child_frame:=base_footprint max_range:=5.0 min_range:=0.2"' >> /root/.bashrc
RUN echo 'alias launch_state_publisher="cd /home/ros2_ws && ros2 launch state_estimation state_publisher_launch.py "' >> /root/.bashrc


RUN echo 'alias launch_sim_dynamics="cd /home/coppeliasim_simulation/CoppeliaSim && ./coppeliaSim.sh -f ../dynamics.ttt"' >> /root/.bashrc
RUN echo 'alias launch_sim_kinematics="cd /home/coppeliasim_simulation/CoppeliaSim && ./coppeliaSim.sh -f ../kinematics.ttt"' >> /root/.bashrc

RUN echo 'alias python="python3"' >> /root/.bashrc


WORKDIR /home
RUN source /root/.bashrc


